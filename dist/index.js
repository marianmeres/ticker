const e=e=>"function"==typeof e,t=(t,n="")=>{if(!e(t))throw new TypeError(`${n} Expecting function arg`.trim())},n=(n=1e3)=>{const r=((n=undefined,r=null)=>{const s=t=>e(r?.persist)&&r.persist(t);let o=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),n=(e,n)=>{if("function"!=typeof n)throw new TypeError("Expecting callback function as second argument");return t(e).add(n),()=>t(e).delete(n)};return{publish:(e,n={})=>{t(e).forEach((e=>e(n)))},subscribe:n,subscribeOnce:(e,t)=>{const r=n(e,(e=>{t(e),r()}));return r},unsubscribeAll:t=>e.delete(t)}})(),i=n;s(i);const c=()=>i,u=e=>{i!==e&&(i=e,s(i),o.publish("change",i))};return{set:u,get:c,update:e=>{t(e,"[update]"),u(e(c()))},subscribe:e=>(t(e,"[subscribe]"),e(i),o.subscribe("change",e))}})(0);let s=0;if(n=parseInt(n,10),isNaN(n)||n<0)throw new TypeError("Invalid interval. Expecting positive non-zero number of milliseconds.");const o=()=>{r.set("undefined"!=typeof window?window.performance.now():Date.now()),s=setTimeout(o,n)},i=()=>{r.set(0),s&&(clearTimeout(s),s=0)};return{start:()=>!s&&o(),stop:i,subscribe:e=>{const t=r.subscribe(e);return()=>{i(),t()}}}};export{n as createTicker};
