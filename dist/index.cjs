"use strict";const e=e=>"function"==typeof e,t=(t,s="")=>{if(!e(t))throw new TypeError(`${s} Expecting function arg`.trim())};exports.createTicker=(s=1e3,r=!1)=>{const n=e=>{if(e=parseInt(e,10),isNaN(e)||e<=0)throw new TypeError("Invalid interval. Expecting positive non-zero number of milliseconds.");s=e};n(s);const c=((s=undefined,r=null)=>{const n=t=>e(r?.persist)&&r.persist(t);let c=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),s=(e,s)=>{if("function"!=typeof s)throw new TypeError("Expecting callback function as second argument");return t(e).add(s),()=>t(e).delete(s)};return{publish:(e,s={})=>{t(e).forEach((e=>e(s)))},subscribe:s,subscribeOnce:(e,t)=>{const r=s(e,(e=>{t(e),r()}));return r},unsubscribeAll:t=>e.delete(t)}})(),i=s;n(i);const o=()=>i,u=e=>{i!==e&&(i=e,n(i),c.publish("change",i))};return{set:u,get:o,update:e=>{t(e,"[update]"),u(e(o()))},subscribe:e=>(t(e,"[subscribe]"),e(i),c.subscribe("change",e))}})(0);let i=0;const o=()=>{c.set(Date.now()),i=setTimeout(o,s)},u={subscribe:c.subscribe,start:()=>(!i&&o(),u),stop:()=>(c.set(0),i&&(clearTimeout(i),i=0),u),setInterval:e=>(n(e),u)};return r&&u.start(),u};
