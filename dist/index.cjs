"use strict";const e=e=>"function"==typeof e,t=(t,r="")=>{if(!e(t))throw new TypeError(`${r} Expecting function arg`.trim())};exports.createTicker=(r=1e3)=>{const s=((r=undefined,s=null)=>{const n=t=>e(s?.persist)&&s.persist(t);let c=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),r=(e,r)=>{if("function"!=typeof r)throw new TypeError("Expecting callback function as second argument");return t(e).add(r),()=>t(e).delete(r)};return{publish:(e,r={})=>{t(e).forEach((e=>e(r)))},subscribe:r,subscribeOnce:(e,t)=>{const s=r(e,(e=>{t(e),s()}));return s},unsubscribeAll:t=>e.delete(t)}})(),i=r;n(i);const o=()=>i,u=e=>{i!==e&&(i=e,n(i),c.publish("change",i))};return{set:u,get:o,update:e=>{t(e,"[update]"),u(e(o()))},subscribe:e=>(t(e,"[subscribe]"),e(i),c.subscribe("change",e))}})(0);let n=0;if(r=parseInt(r,10),isNaN(r)||r<0)throw new TypeError("Invalid interval. Expecting positive non-zero number of milliseconds.");const c=()=>{s.set(Date.now()),n=setTimeout(c,r)},i=()=>{s.set(0),n&&(clearTimeout(n),n=0)};return{start:()=>!n&&c(),stop:i,subscribe:e=>{const t=s.subscribe(e);return()=>{i(),t()}}}};
