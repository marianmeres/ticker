"use strict";const e=e=>"function"==typeof e,t=(t,s="")=>{if(!e(t))throw new TypeError(`${s} Expecting function arg`.trim())};exports.createTicker=(s=1e3)=>{if(s=parseInt(s,10),isNaN(s)||s<0)throw new TypeError("Invalid interval. Expecting positive non-zero number of milliseconds.");const r=((s=undefined,r=null)=>{const n=t=>e(r?.persist)&&r.persist(t);let i=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),s=(e,s)=>{if("function"!=typeof s)throw new TypeError("Expecting callback function as second argument");return t(e).add(s),()=>t(e).delete(s)};return{publish:(e,s={})=>{t(e).forEach((e=>e(s)))},subscribe:s,subscribeOnce:(e,t)=>{const r=s(e,(e=>{t(e),r()}));return r},unsubscribeAll:t=>e.delete(t)}})(),c=s;n(c);const o=()=>c,u=e=>{c!==e&&(c=e,n(c),i.publish("change",c))};return{set:u,get:o,update:e=>{t(e,"[update]"),u(e(o()))},subscribe:e=>(t(e,"[subscribe]"),e(c),i.subscribe("change",e))}})(0);let n=0;const i=()=>{r.set(Date.now()),n=setTimeout(i,s)},c={subscribe:r.subscribe,start:()=>(!n&&i(),c),stop:()=>(r.set(0),n&&(clearTimeout(n),n=0),c)};return c};
