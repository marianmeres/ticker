!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).ticker={})}(this,(function(e){"use strict";const t=e=>"function"==typeof e,n=(e,n="")=>{if(!t(e))throw new TypeError(`${n} Expecting function arg`.trim())};e.createTicker=(e=1e3,s=!1)=>{const r=t=>{if(t=parseInt(t,10),isNaN(t)||t<=0)throw new TypeError("Invalid interval. Expecting positive non-zero number of milliseconds.");e=t};r(e);const i=((e=undefined,s=null)=>{const r=e=>t(s?.persist)&&s.persist(e);let i=(()=>{const e=new Map,t=t=>(e.has(t)||e.set(t,new Set),e.get(t)),n=(e,n)=>{if("function"!=typeof n)throw new TypeError("Expecting callback function as second argument");return t(e).add(n),()=>t(e).delete(n)};return{publish:(e,n={})=>{t(e).forEach((e=>e(n)))},subscribe:n,subscribeOnce:(e,t)=>{const s=n(e,(e=>{t(e),s()}));return s},unsubscribeAll:t=>e.delete(t)}})(),o=e;r(o);const c=()=>o,u=e=>{o!==e&&(o=e,r(o),i.publish("change",o))};return{set:u,get:c,update:e=>{n(e,"[update]"),u(e(c()))},subscribe:e=>(n(e,"[subscribe]"),e(o),i.subscribe("change",e))}})(0);let o=0;const c=()=>{i.set(Date.now()),o=setTimeout(c,e)},u={subscribe:i.subscribe,start:()=>(!o&&c(),u),stop:()=>(i.set(0),o&&(clearTimeout(o),o=0),u),setInterval:e=>(r(e),u)};return s&&u.start(),u}}));
